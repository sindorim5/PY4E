딕셔너리

리스트 - 순서를 유지하는 값들의 선형 컬렉션
딕셔너리 - 고유의 라벨을 갖고 있는 값을 넣는 가방

딕셔너리에 없는 키를 참조하면 Traceback 에러가 발생한다.
in 연산자를 사용해서 해당 키가 딕셔너리에 존재하는지 확인할 수 있다.

dict.get('sth') sth에 해당하는 값을 반환,
dict.get('sth', 0) dict에 sth가 없으면 디폴트 값 0을 반환한다.

counts = dict()
names = ['csev', 'cwen', 'csev', 'zqian', 'cwen']
for name in names :
	counts[name] = counts.get(name, 0) + 1
print(counts)

items() 메소드를 이용하면 딕셔너리의 key와 value를 튜플의 쌍으로 얻을 수 있다.

Exercise 9.1: Write a program that reads the words in words.txt and stores them as
keys in a dictionary. It doesn’t matter what the values are. Then you
can use the in operator as a fast way to check whether a string is in the
dictionary.

Exercise 9.2: Write a program that categorizes each mail message by
which day of the week the commit was done. To do this look for lines
that start with “From”, then look for the third word and keep a running
count of each of the days of the week. At the end of the program print
out the contents of your dictionary (order does not matter).

Exercise 9.3: Write a program to read through a mail log, build a his-
togram using a dictionary to count how many messages have come from
each email address, and print the dictionary.

Exercise 9.4: Add code to the above program to figure out who has the
most messages in the file. After all the data has been read and the dic-
tionary has been created, look through the dictionary using a maximum
loop (see Chapter 5: Maximum and minimum loops) to find who has
the most messages and print how many messages the person has.

Exercise 9.5: This program records the domain name (instead of the
address) where the message was sent from instead of who the mail came
from (i.e., the whole email address). At the end of the program, print
out the contents of your dictionary.
